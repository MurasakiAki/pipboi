#!/bin/bash

project_dir="$(echo "$PATH" | awk -F: '{print $NF}')"

emotion=""
logged_in_usr=""

function output {
    clear
    echo ==========================
    echo "  ,~."
    echo " ($emotion)"
    echo "//-=-\\\\"
    echo "(\_=_/)"
    echo " ^^ ^^"
}

# Check if the project directory path is empty or not found
if [ -z "$project_dir" ]; then
    echo "Project directory path not found in PATH variable. Please set it."
    exit 1
else
    cd "$project_dir"
fi

if [ "$1" == "register" ]; then
    username="$2"

    if [ -z "$2" ]; then
        emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
        output
        emotion=""
        echo Fill in your name too dummy
    
    elif [ -d  ".$username" ]; then
        emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
        output
        emotion=""
        echo Username already exists silly
    
    else
        password=""
        is_sure=0
        
        until [ $is_sure -eq 1 ]; do
            emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
            output
            emotion=""
            read -s -p "Enter password: " password 
            echo ""
            ans=""
            until [ "$ans" = "yes" ] || [ "$ans" = "no" ]; do
                emotion=$(python3 -c "from system import gen_surprise; print(gen_surprise())")
                output
                emotion=""
                read -p "Are you sure? [yes|no] " ans
            done
            
            if [ "$ans" = "yes" ]; then
                is_sure=1
            fi
        done

        mkdir .$username
        #.userdata.ini file
        touch .$username/.usrdata.ini
        echo "[Data]" >> .$username/.usrdata.ini
        echo "username=$username" >> .$username/.usrdata.ini
        hashedpw=$(python3 -c "from system import hash_password; print(hash_password('$password'))")
        echo "password=$hashedpw" >> .$username/.usrdata.ini
        #.locations.json file
        touch .$username/.locations.json
        echo '{"locations" : [] }' > .$username/.locations.json
        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
        output
        emotion=""
        echo yay user created
        
    fi

    elif [ "$1" == "login" ]; then
    username="$2"

    if [ -z "$2" ]; then
        emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
        output
        emotion=""
        echo Fill in your name too dummy
    elif ! [ -d  ".$username" ]; then
        emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
        output
        emotion=""
        echo Username doesn\'t exists silly

    else

        input_pw=""
        file=".${username}/.usrdata.ini"
        hashed_pw=$(grep -E "^\[Data\]" -A 1000 "$file" | grep -E "password=" | cut -d'=' -f2-)

        while true; do
            emotion=$(python3 -c "from system import gen_surprise; print(gen_surprise())")
            output
            emotion=""
            read -s -p "What's your password? " input_pw
            echo

            if [ "$(python3 -c "from system import check_password; print(check_password('$input_pw', '$hashed_pw'))")" = "True" ]; then
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                emotion=""            
                echo "Password is correct!"
                logged_in_usr="$username"
                break
            else
                emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                output
                emotion=""                   
                echo "Password is incorrect. Please try again."
                sleep 5
            fi
        done

        until [ "$input1" == "quit" ]; do
            read -p "Enter command: " input1 input2 
            # Time
            if [ "$input1" == "time" ]; then
                script_command=$(python3 -c "from system import tell_time; print(tell_time())")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "day" ]; then
                script_command=$(python3 -c "from system import tell_day; print(tell_day())")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "dt" ]; then
                script_command=$(python3 -c "from system import tell_dt; print(tell_dt())")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            #elif [ "$input1" == "setalarm" ]; then

            # Basic manipulation
            elif [ "$input1" == "help" ]; then
                section="$input2"
                content=$(cat .help.txt)

                if [ -n "$section" ]; then
                    sec_to_check="#$(echo "$section" | tr '[:lower:]' '[:upper:]')#"
                    if grep -q "$sec_to_check" .help.txt; then
                        emotion=$(python3 -c "from system import gen_love; print(gen_love())")
                        output
                        emotion=""
                        echo Displaying "$section" of help file
                        output_sec=$(echo "$content" | sed -n "/^$sec_to_check$/,/^#/p" | sed '1d;$d')
                        echo '////////////////////'
                        echo "$sec_to_check"
                        echo "$output_sec"
                        echo '////////////////////'
                    else
                        emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                        output
                        emotion=""     
                        echo "No section '$section' found"
                    fi
                else
                    emotion=$(python3 -c "from system import gen_love; print(gen_love())")
                    output
                    emotion=""
                    cat .help.txt
                fi
            

            elif [ "$input1" == "whoami" ]; then
                emotion=$(python3 -c "from system import gen_love; print(gen_love())")
                output
                emotion=""
                echo "You are" $logged_in_usr
            elif [ "$input1" == "write" ]; then
                file_to_write="$input2"
                if [ -n "$file_to_write" ]; then
                    if [ -f ".${logged_in_usr}/${file_to_write}" ]; then
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        emotion=""
                        read -p "Please enter text: " text
                        echo "$text" >> ".${logged_in_usr}/${file_to_write}"
                        emotion=$(python3 -c "from system import gen_love; print(gen_love())")
                        output
                        emotion=""
                        echo Text saved to file "$file_to_write"
                    else 
                        emotion=$(python3 -c "from system import gen_surprise; print(gen_surprise())")
                        output
                        emotion=""
                        touch ".${logged_in_usr}/${file_to_write}"
                        echo Created file "$file_to_write" in your folder
                    fi
                fi
            elif [ "$input1" == "read" ]; then
                file_to_read="$input2"
                if [ -n "$file_to_read" ]; then
                    if [ "$file_to_read" == ".usrdata.ini" ]; then
                        emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                        output
                        emotion=""
                        echo You don\'t have access to this file 
                    elif [ -f ".${logged_in_usr}/${file_to_read}" ]; then
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        emotion=""
                        cat ".${logged_in_usr}/${file_to_read}"
                    else
                        emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                        output
                        emotion=""
                        echo File "$file_to_read" doesn\'t exist
                    fi
                fi
            elif [ "$input1" == "removef" ]; then
                file_to_remove="$input2"
                if [ -n "$file_to_remove" ]; then
                    if [ "$file_to_remove" == ".usrdata.ini" ]; then
                        emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                        output
                        emotion=""
                        echo You can\'t remove this file
                    elif [ -f ".${logged_in_usr}/${file_to_remove}" ]; then
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        emotion=""
                        rm -f ".${logged_in_usr}/${file_to_remove}"
                        echo File "$file_to_remove" removed
                    else
                        emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                        output
                        emotion=""
                        echo File "$file_to_remove" doesn\'t exist
                    fi 
                fi
            elif [ "$input1" == "makedir" ]; then
                dir_name="$input2"
                if [ -n "$dir_name" ]; then
                    emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                    output
                    emotion=""
                    mkdir ".${logged_in_usr}/${dir_name}"
                    echo Directory "$dir_name" created
                else
                    emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                    output
                    emotion=""
                    echo Fill in directory name!
                fi
            elif [ "$input1" == "removed" ]; then
                dir_to_rem="$input2"
                if [ -d ".${logged_in_usr}/${dir_to_rem}" ]; then
                    if [ -n "$dir_to_rem" ]; then
                        read -p "Are you sure you want to delete "$dir_to_rem" and all its contents? [yes|no]" ans
                        if [ "$ans" == "yes" ]; then
                            rm -rf ".${logged_in_usr}/${dir_to_rem}"
                            emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                            output
                            emotion=""
                            echo Directory "$dir_to_rem" deleted
                        elif [ "$ans" == "no" ]; then
                            emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
                            output
                            emotion=""
                            echo Won\'t delete "$dir_to_rem" directory
                        else
                            emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                            output
                            emotion=""
                            echo Only "[yes|no]!"
                        fi
                    else
                        emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                        output
                        emotion=""
                        echo Fill in directory name!
                    fi
                else
                    echo Direcory "$dir_to_rem" doens\'t exist
                fi
            elif [ "$input1" == "list" ]; then
                dir_name="$input2"
                if [ -n "$dir_name" ]; then
                    directory_to_list=".${logged_in_usr}/${dir_name}"
                    if [ -d "$directory_to_list" ]; then
                        list_output=$(ls "$directory_to_list")
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        emotion=""
                        echo "$list_output"
                    else
                        emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
                        output
                        emotion=""
                        echo "Directory '$dir_name' does not exist."
                    fi
                else
                    list_output=$(ls .${logged_in_usr})
                    emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                    output
                    emotion=""
                    echo "$list_output"
                fi
            elif [ "$input1" == "update" ]; then
                git pull origin master
                emotion=$(python3 -c "from system import gen_love; print(gen_love())")
                output
                emotion=""
                echo Your PIPBOI is updated '<3'

            # Weather
            elif [ "$input1" == "weather" ]; then
                city="$input2"
                if [ -n "$city" ]; then  # Check if city name is not empty
                    if [ "$(python3 -c "from system import is_valid_city; print(is_valid_city('$city'))")" = "True" ]; then
                        script_command=$(python3 -c "from system import tell_weather; print(tell_weather('$city'))")
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        echo Currently in "$city" it\'s "$script_command"
                        script_command=""
                        emotion=""
                    else
                        emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
                        output
                        echo Please enter a valid city name
                        script_command=""
                        emotion=""
                    fi
                else
                    emotion=$(python3 -c "from system import gen_disappointment; print(gen_disappointment())")
                    output
                    echo Please enter a city name
                    script_command=""
                    emotion=""
                fi

            #IP Location
            elif [ "$input1" == "whereami" ]; then
                script_command=$(python3 -c "from system import tell_location; print(tell_location('$logged_in_usr'))")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "whereip" ]; then
                ip_add="$input2"
                if [ -n "$ip_add" ]; then
                    script_command=$(python3 -c "from system import whereip; print(whereip('$ip_add'))")
                    emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                    output
                    echo "$script_command"
                    script_command=""
                    emotion=""
                else
                    emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                    output
                    emotion=""
                    echo Enter valid IPv4 address
                fi
            elif [ "$input1" == "whereloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    script_command=$(python3 -c "from system import whereloc; print(whereloc('$logged_in_usr', '$loc_name'))")
                    echo "$script_command"
                fi
            elif [ "$input1" == "addloc" ]; then
                if [ "$input2" == "here" ]; then
                    read -p "Locations name: " name
                    lat=$(python3 -c "from system import tell_latitude; print(tell_latitude())")
                    lng=$(python3 -c "from system import tell_longitude; print(tell_longitude())")
                    script_command=$(python3 -c "from system import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                    emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                    output
                    echo "$script_command"
                    script_command=""
                    emotion=""
                elif [[ $input2 == *"/"* ]]; then
                    read -p "Locations name: " name
                    lat=$(echo "$input2" | cut -d '/' -f1)
                    lng=$(echo "$input2" | cut -d '/' -f2)
                    number_regex='^[+-]?[0-9]+\.?[0-9]*$'
                    if [[ $lat =~ $number_regex && $lng =~ $number_regex ]]; then
                        script_command=$(python3 -c "from system import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                        emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                        output
                        echo "$script_command"
                        script_command=""
                        emotion=""
                    else
                        emotion=$(python3 -c "from system import gen_angry; print(gen_angry())")
                        output
                        emotion=""
                        echo Enter only numbers or floating points e.x. "[12.34/5.67]"
                    fi
                fi
            elif [ "$input1" == "remloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    script_command=$(python3 -c "from system import remove_location; print(remove_location('$logged_in_usr', '$loc_name'))")
                    emotion=$(python3 -c "from system import gen_surprise; print(gen_surprise())")
                    output
                    echo "$script_command"
                    script_command=""
                    emotion=""
                else
                    emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                    output
                    emotion=""
                    echo Enter location name plweas
                fi
            elif [ "$input1" == "showloc" ]; then
                script_command=$(python3 -c "from system import show_location; print(show_location('$logged_in_usr'))")
                emotion=$(python3 -c "from system import gen_surprise; print(gen_surprise())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "distance" ]; then
                read -p "Enter latitude and longitude of first location: " lat1 lng1
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from system import distance; print(distance('$lat1', '$lng1', '$lat2', '$lng2'))")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "distname" ]; then
                read -p "Enter name of first location: " name
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from system import distname; print(distname('$logged_in_usr', '$name', '$lat2', '$lng2'))")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "distnames" ]; then
                read -p "Enter name of first location: " name1
                read -p "Enter name of first location: " name2
                script_command=$(python3 -c "from system import distnames; print(distnames('$logged_in_usr', '$name1', '$name2'))")
                emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                output
                echo "$script_command"
                script_command=""
                emotion=""
            elif [ "$input1" == "disthere" ]; then
                loc="$input2"
                if [ -n "$loc" ]; then
                    script_command=$(python3 -c "from system import disthere; print(disthere('$logged_in_usr', '$loc'))")
                    emotion=$(python3 -c "from system import gen_normal; print(gen_normal())")
                    output
                    echo "$script_command"
                    script_command=""
                    emotion=""
                fi
            else
                if [ "$input1" == "quit" ]; then
                    emotion=$(python3 -c "from system import gen_sad; print(gen_sad())")
                    output
                    emotion=""
                    echo $(python3 -c "from system import rnd_farewell; print(rnd_farewell())")
                else
                    emotion=$(python3 -c "from system import random_emotion; print(random_emotion())")
                    output
                    emotion=""
                    echo ">" $input1
                fi

            fi
            
        done

    fi

fi