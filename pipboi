#!/bin/bash

project_dir="$(echo "$PATH" | awk -F: '{print $NF}')"

logged_in_usr=""

stty_settings=$(stty -g)

# normal 0-2
# love 3-5
# surprise 6-8
# disappointment 9-11
# sad 12-14
# angry 15-17

emotions=("'V'" ">v<" "◠‿◠" "¬‿¬✿" "◕ω◕✿" "｡♥‿♥｡" "☉_☉" "'o'" "⊙△⊙" "<_<" "¬_¬" "⌣_⌣”" "QvQ" "ಥ﹏ಥ" "╥﹏╥" "╬ Ò﹏Ó" "=_=" "⋋▂⋌")

function output() {
    local emotion="$1"

    case $emotion in
        "random")
            array_length=${#emotions[@]}
            random_index=$((RANDOM % array_length))
            emotion="${emotions[$random_index]}"
            ;;
        "normal")
            start_index=0
            end_index=2
            ;;
        "love")
            start_index=3
            end_index=5
            ;;
        "surprise")
            start_index=6
            end_index=8
            ;;
        "disappointment")
            start_index=9
            end_index=11
            ;;
        "sad")
            start_index=12
            end_index=14
            ;;
        "angry")
            start_index=15
            end_index=17
            ;;
        *)
            echo "Invalid emotion: $emotion"
            return 1
            ;;
    esac

    if [ "$start_index" -ge 0 ] && [ "$end_index" -lt ${#emotions[@]} ] && [ "$start_index" -le "$end_index" ]; then
        random_index=$((RANDOM % ($end_index - $start_index + 1) + $start_index))
        emotion="${emotions[$random_index]}"
    else
        echo "Invalid range of indexes for emotion: $emotion"
        return 1
    fi

    clear
    echo "=========================="
    echo "  ,~."
    echo " ($emotion)"
    echo "//-=-\\\\"
    echo "(\_=_/)"
    echo " ^^ ^^"

    emotion=""
}

enable_input() {
    # Restore terminal settings
    stty "$stty_settings"
}

# Check if the project directory path is empty or not found
if [ -z "$project_dir" ]; then
    echo "Project directory path not found in PATH variable. Please set it."
    exit 1
else
    cd "$project_dir"
fi

if [ "$1" == "register" ]; then
    username="$2"

    if [ -z "$2" ]; then
        output disappointment
        echo Fill in your name too dummy
    
    elif [ -d  ".$username" ]; then
        output sad
        echo Username already exists silly
    
    else
        password=""
        is_sure=0
        
        until [ $is_sure -eq 1 ]; do
            output normal
            read -s -p "Enter password: " password 
            echo ""
            ans=""
            until [ "$ans" = "yes" ] || [ "$ans" = "no" ]; do
                output surprise
                read -p "Are you sure? [yes|no] " ans
            done
            
            if [ "$ans" = "yes" ]; then
                is_sure=1
            fi
        done

        mkdir .$username
        #.userdata.ini file
        touch .$username/.usrdata.ini
        echo "[Data]" >> .$username/.usrdata.ini
        echo "username=$username" >> .$username/.usrdata.ini
        hashedpw=$(python3 -c "from system import hash_password; print(hash_password('$password'))")
        echo "password=$hashedpw" >> .$username/.usrdata.ini
        #.locations.json file
        touch .$username/.locations.json
        echo '{"locations" : [] }' > .$username/.locations.json
        output normal
        echo yay user created   
    fi

elif [ "$1" == "login" ]; then
    username="$2"

    if [ -z "$2" ]; then
        output disappointment
        echo Fill in your name too dummy

    elif ! [ -d  ".$username" ]; then
        output sad
        echo Username doesn\'t exists silly

    else
        input_pw=""
        file=".${username}/.usrdata.ini"
        hashed_pw=$(grep -E "^\[Data\]" -A 1000 "$file" | grep -E "password=" | cut -d'=' -f2-)

        while true; do
            output surprise
            read -s -p "What's your password? " input_pw
            echo

            if [ "$(python3 -c "from system import check_password; print(check_password('$input_pw', '$hashed_pw'))")" = "True" ]; then
                output normal         
                echo "Password is correct!"
                logged_in_usr="$username"
                break
            else
                output sad                 
                echo "Password is incorrect. Please try again."
                stty -echo
                sleep 5
                enable_input
            fi
        done

        until [ "$input1" == "quit" ]; do
            read -p "Enter command: " input1 input2 
            # Time
            if [ "$input1" == "time" ]; then
                script_command=$(python3 -c "from system import tell_time; print(tell_time())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "day" ]; then
                script_command=$(python3 -c "from system import tell_day; print(tell_day())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "dt" ]; then
                script_command=$(python3 -c "from system import tell_dt; print(tell_dt())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "calendar" ]; then
                type="$input2"
                if [ -n "$type" ]; then
                    if [ "$type" == "year" ]; then
                        read -p "Please enter year: " year
                        script_command=$(python3 -c "from system import tell_y_calendar; print(tell_y_calendar('$year'))")
                        output normal
                        echo Calendar of the year "$year" 
                        echo "$script_command"
                        script_command=""
                    elif [ "$type" == "month" ]; then
                        read -p "Please enter year: " year
                        read -p "Please enter month: " month
                        script_command=$(python3 -c "from system import tell_m_calendar; print(tell_m_calendar('$year', '$month'))")
                        output normal
                        echo Calendar of the year "$year", month "$month"
                        echo "$script_command"
                        script_command=""
                    fi
                fi

            # Basic manipulation
            elif [ "$input1" == "help" ]; then
                section="$input2"
                content=$(cat .help.txt)
                if [ -n "$section" ]; then
                    sec_to_check="#$(echo "$section" | tr '[:lower:]' '[:upper:]')#"
                    if grep -q "$sec_to_check" .help.txt; then
                        output love
                        echo Displaying "$section" of help file
                        output_sec=$(echo "$content" | sed -n "/^$sec_to_check$/,/^#/p" | sed '1d;$d')
                        echo '////////////////////'
                        echo "$sec_to_check"
                        echo "$output_sec"
                        echo '////////////////////'
                    else
                        output sad   
                        echo "No section '$section' found"
                    fi
                else
                    output love
                    cat .help.txt
                fi
            elif [ "$input1" == "config" ]; then
                echo "Not integrated yet"
            elif [ "$input1" == "check" ]; then
                if [ "$input2" == "game" ]; then
                    if [ -d "pipboi-game-pckg" ]; then
                        sed -i '/^\[Configuration\]/,/\[.*\]/{s/^\(has_game_pckg\s*=\s*\).*/\1'"1"'/}' .pipboi-config.ini
                        sed -i '/^\[Configuration\]/,/\[.*\]/{s/^\(is_integrated\s*=\s*\).*/\1'"1"'/}' pipboi-game-pckg/.game-pckg-config.ini
                    fi
                fi
            elif [ "$input1" == "whoami" ]; then
                output love
                echo "You are" $logged_in_usr
            elif [ "$input1" == "write" ]; then
                file_to_write="$input2"
                if [ -n "$file_to_write" ]; then
                    if [ -f ".${logged_in_usr}/${file_to_write}" ]; then
                        output normal
                        read -p "Please enter text: " text
                        echo "$text" >> ".${logged_in_usr}/${file_to_write}"
                        output love
                        echo Text saved to file "$file_to_write"
                    else 
                        output surprise
                        touch ".${logged_in_usr}/${file_to_write}"
                        echo Created file "$file_to_write" in your folder
                    fi
                fi
            elif [ "$input1" == "read" ]; then
                file_to_read="$input2"
                if [ -n "$file_to_read" ]; then
                    if [ "$file_to_read" == ".usrdata.ini" ]; then
                        output angry
                        echo You don\'t have access to this file 
                    elif [ -f ".${logged_in_usr}/${file_to_read}" ]; then
                        output normal
                        cat ".${logged_in_usr}/${file_to_read}"
                    else
                        output sad
                        echo File "$file_to_read" doesn\'t exist
                    fi
                fi
            elif [ "$input1" == "removef" ]; then
                file_to_remove="$input2"
                if [ -n "$file_to_remove" ]; then
                    if [ "$file_to_remove" == ".usrdata.ini" ]; then
                        output angry
                        echo You can\'t remove this file
                    elif [ -f ".${logged_in_usr}/${file_to_remove}" ]; then
                        output normal
                        rm -f ".${logged_in_usr}/${file_to_remove}"
                        echo File "$file_to_remove" removed
                    else
                        output sad
                        echo File "$file_to_remove" doesn\'t exist
                    fi 
                fi
            elif [ "$input1" == "makedir" ]; then
                dir_name="$input2"
                if [ -n "$dir_name" ]; then
                    output normal
                    mkdir ".${logged_in_usr}/${dir_name}"
                    echo Directory "$dir_name" created
                else
                    output angry
                    echo Fill in directory name!
                fi
            elif [ "$input1" == "removed" ]; then
                dir_to_rem="$input2"
                if [ -d ".${logged_in_usr}/${dir_to_rem}" ]; then
                    if [ -n "$dir_to_rem" ]; then
                        read -p "Are you sure you want to delete "$dir_to_rem" and all its contents? [yes|no]" ans
                        if [ "$ans" == "yes" ]; then
                            rm -rf ".${logged_in_usr}/${dir_to_rem}"
                            output sad
                            echo Directory "$dir_to_rem" deleted
                        elif [ "$ans" == "no" ]; then
                            output disappointment
                            echo Won\'t delete "$dir_to_rem" directory
                        else
                            output angry
                            echo Only "[yes|no]!"
                        fi
                    else
                        output angry
                        echo Fill in directory name!
                    fi
                else
                    echo Direcory "$dir_to_rem" doens\'t exist
                fi
            elif [ "$input1" == "list" ]; then
                dir_name="$input2"
                if [ -n "$dir_name" ]; then
                    directory_to_list=".${logged_in_usr}/${dir_name}"
                    if [ -d "$directory_to_list" ]; then
                        list_output=$(ls "$directory_to_list")
                        output normal
                        echo "$list_output"
                    else
                        output disappointment
                        echo "Directory '$dir_name' does not exist."
                    fi
                else
                    list_output=$(ls .${logged_in_usr})
                    output normal
                    echo "$list_output"
                fi
            elif [ "$input1" == "update" ]; then
                is_conn=$(python3 -c "from system import check_connection; print(check_connection())")
                if [ "$is_conn" == "1" ]; then
                    git pull origin master
                    output love
                    echo Your PIPBOI is updated '<3'
                else
                    output sad
                    echo No internet connection :/
                fi

            # Weather
            elif [ "$input1" == "weather" ]; then
                city="$input2"
                if [ -n "$city" ]; then  # Check if city name is not empty
                    is_conn=$(python3 -c "from system import check_connection; print(check_connection())")
                    if [ "$is_conn" == "1" ]; then
                        if [ "$(python3 -c "from system import is_valid_city; print(is_valid_city('$city'))")" = "True" ]; then
                            script_command=$(python3 -c "from system import tell_weather; print(tell_weather('$city'))")
                            output normal
                            echo Currently in "$city" it\'s "$script_command"
                            script_command=""
                        else
                            output disappointment
                            echo Please enter a valid city name
                            script_command=""
                        fi
                    else
                        output sad
                        echo No internet connection :/
                    fi
                else
                    output disappointment
                    echo Please enter a city name
                    script_command=""
                fi

            #IP Location
            elif [ "$input1" == "whereami" ]; then
                is_conn=$(python3 -c "from system import check_connection; print(check_connection())")
                if [ "$is_conn" == "1" ]; then
                    script_command=$(python3 -c "from system import tell_location; print(tell_location('$logged_in_usr'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                else
                    output sad
                    echo No internet connection :/
                fi
            elif [ "$input1" == "whereip" ]; then
                ip_add="$input2"
                if [ -n "$ip_add" ]; then
                    is_conn=$(python3 -c "from system import check_connection; print(check_connection())")
                    if [ "$is_conn" == "1" ]; then
                        script_command=$(python3 -c "from system import whereip; print(whereip('$ip_add'))")
                        output normal
                        echo "$script_command"
                        script_command=""
                    else
                        output sad
                        echo No internet connection :/
                    fi
                else
                    output angry
                    echo Enter valid IPv4 address
                fi
            elif [ "$input1" == "whereloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    output normal
                    script_command=$(python3 -c "from system import whereloc; print(whereloc('$logged_in_usr', '$loc_name'))")
                    echo "$script_command"
                fi
            elif [ "$input1" == "addloc" ]; then
                if [ "$input2" == "here" ]; then
                    read -p "Locations name: " name
                    lat=$(python3 -c "from system import tell_latitude; print(tell_latitude())")
                    lng=$(python3 -c "from system import tell_longitude; print(tell_longitude())")
                    script_command=$(python3 -c "from system import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                elif [[ $input2 == *"/"* ]]; then
                    read -p "Locations name: " name
                    lat=$(echo "$input2" | cut -d '/' -f1)
                    lng=$(echo "$input2" | cut -d '/' -f2)
                    number_regex='^[+-]?[0-9]+\.?[0-9]*$'
                    if [[ $lat =~ $number_regex && $lng =~ $number_regex ]]; then
                        script_command=$(python3 -c "from system import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                        output normal
                        echo "$script_command"
                        script_command=""
                    else
                        output angry
                        echo Enter only numbers or floating points e.x. "[12.34/5.67]"
                    fi
                fi
            elif [ "$input1" == "remloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    script_command=$(python3 -c "from system import remove_location; print(remove_location('$logged_in_usr', '$loc_name'))")
                    output surprise
                    echo "$script_command"
                    script_command=""
                else
                    output sad
                    echo Enter location name plweas
                fi
            elif [ "$input1" == "showloc" ]; then
                script_command=$(python3 -c "from system import show_location; print(show_location('$logged_in_usr'))")
                output surprise
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distance" ]; then
                read -p "Enter latitude and longitude of first location: " lat1 lng1
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from system import distance; print(distance('$lat1', '$lng1', '$lat2', '$lng2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distname" ]; then
                read -p "Enter name of first location: " name
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from system import distname; print(distname('$logged_in_usr', '$name', '$lat2', '$lng2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distnames" ]; then
                read -p "Enter name of first location: " name1
                read -p "Enter name of first location: " name2
                script_command=$(python3 -c "from system import distnames; print(distnames('$logged_in_usr', '$name1', '$name2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "disthere" ]; then
                loc="$input2"
                if [ -n "$loc" ]; then
                    script_command=$(python3 -c "from system import disthere; print(disthere('$logged_in_usr', '$loc'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                fi
            else
                if [ "$input1" == "quit" ]; then
                    output sad
                    echo $(python3 -c "from system import rnd_farewell; print(rnd_farewell())")
                else
                    output random
                    echo ">" $input1 $input2
                fi

            fi
            
        done

    fi

fi