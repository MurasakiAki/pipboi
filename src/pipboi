#!/bin/bash

source output_pip.sh
source farewell_pip.sh
source basics.sh
source mods.sh

project_dir="$(echo "$PATH" | awk -F: '{print $NF}')"

logged_in_usr=""

stty_settings=$(stty -g)

enable_input() {
    # Restore terminal settings
    stty "$stty_settings"
}

# Check if the project directory path is empty or not found
if [ -z "$project_dir" ]; then
    echo "Project directory path not found in PATH variable. Please set it."
    exit 1
else
    cd "$project_dir/src"
fi

if [ "$1" == "register" ]; then
    username="$2"

    if [ -z "$2" ]; then
        output disappointment
        echo Fill in your name too dummy
    
    elif [ -d  "../.$username" ]; then
        output sad
        echo Username already exists silly
    
    else
        password=""
        is_sure=0
        
        until [ $is_sure -eq 1 ]; do
            output normal
            read -s -p "Enter password: " password 
            echo ""
            ans=""
            until [ "$ans" = "yes" ] || [ "$ans" = "no" ]; do
                output surprise
                read -p "Are you sure? [yes|no] " ans
            done
            
            if [ "$ans" = "yes" ]; then
                is_sure=1
            fi
        done

        mkdir .$username
        #.userdata.ini file
        touch ../.$username/.usrdata.ini
        echo "[Data]" >> ../.$username/.usrdata.ini
        echo "username=$username" >> ../.$username/.usrdata.ini
        hashedpw=$(python3 -c "from passwd_funcs import hash_password; print(hash_password('$password'))")
        echo "password=$hashedpw" >> ../.$username/.usrdata.ini
        #.locations.json file
        touch ../.$username/.locations.json
        echo '{"locations" : [] }' > ../.$username/.locations.json
        output normal
        echo yay user created   
    fi

elif [ "$1" == "login" ]; then
    username="$2"

    if [ -z "$2" ]; then
        output disappointment
        echo Fill in your name too dummy

    elif ! [ -d  "../.$username" ]; then
        output sad
        echo Username doesn\'t exists silly

    else
        input_pw=""
        file="../.${username}/.usrdata.ini"
        hashed_pw=$(grep -E "^\[Data\]" -A 1000 "$file" | grep -E "password=" | cut -d'=' -f2-)

        while true; do
            output surprise
            read -s -p "What's your password? " input_pw
            echo

            if [ "$(python3 -c "from passwd_funcs import check_password; print(check_password('$input_pw', '$hashed_pw'))")" = "True" ]; then
                output normal         
                echo "Password is correct!"
                logged_in_usr="$username"
                break
            else
                output sad                 
                echo "Password is incorrect. Please try again."
                stty -echo
                sleep 5
                enable_input
            fi
        done

        until [ "$input1" == "quit" ]; do
            read -p "Enter command: " input1 input2 
            # Time
            if [ "$input1" == "time" ]; then
                script_command=$(python3 -c "from time_funcs import tell_time; print(tell_time())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "day" ]; then
                script_command=$(python3 -c "from time_funcs import tell_day; print(tell_day())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "dt" ]; then
                script_command=$(python3 -c "from time_funcs import tell_dt; print(tell_dt())")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "calendar" ]; then
                type="$input2"
                if [ -n "$type" ]; then
                    if [ "$type" == "year" ]; then
                        read -p "Please enter year: " year
                        script_command=$(python3 -c "from time_funcs import tell_y_calendar; print(tell_y_calendar('$year'))")
                        output normal
                        echo Calendar of the year "$year" 
                        echo "$script_command"
                        script_command=""
                    elif [ "$type" == "month" ]; then
                        read -p "Please enter year: " year
                        read -p "Please enter month: " month
                        script_command=$(python3 -c "from time_funcs import tell_m_calendar; print(tell_m_calendar('$year', '$month'))")
                        output normal
                        echo Calendar of the year "$year", month "$month"
                        echo "$script_command"
                        script_command=""
                    fi
                fi

            # Mods
            elif [ "$input1" == "mods" ]; then
                echo_mods
            elif [ "$input1" == "use" ]; then
                use_mod "$input2"
            elif [ "$input1" == "modinfo" ]; then
                echo_modinfo "$input2"

            # Basic manipulation
            elif [ "$input1" == "help" ]; then
                echo_help "$input2"
            elif [ "$input1" == "whoami" ]; then
                echo_whoami
            elif [ "$input1" == "write" ]; then
                write_file "$input2"
            elif [ "$input1" == "read" ]; then
                read_file "$input2"
            elif [ "$input1" == "removef" ]; then
                remove_file "$input2"
            elif [ "$input1" == "makedir" ]; then
                make_directory "$input2"
            elif [ "$input1" == "removed" ]; then
                remove_directory "$input2"
            elif [ "$input1" == "list" ]; then
                list "$input2"
            elif [ "$input1" == "update" ]; then
                update_pipboi

            # Weather
            elif [ "$input1" == "weather" ]; then
                city="$input2"
                if [ -n "$city" ]; then
                    is_conn=$(python3 -c "from network_funcs import check_connection; print(check_connection())")
                    if [ "$is_conn" == "1" ]; then
                        if [ "$(python3 -c "from geo_funcs import is_valid_city; print(is_valid_city('$city'))")" == "True" ]; then
                            script_command=$(python3 -c "from weather_funcs import tell_weather; print(tell_weather('$city'))")
                            output normal
                            echo Currently in "$city" it\'s "$script_command"
                            script_command=""
                        else
                            output disappointment
                            echo Please enter a valid city name
                            script_command=""
                        fi
                    else
                        output sad
                        echo No internet connection :/
                    fi
                else
                    output disappointment
                    echo Please enter a city name
                    script_command=""
                fi

            #IP Location
            elif [ "$input1" == "whereami" ]; then
                is_conn=$(python3 -c "from network_funcs import check_connection; print(check_connection())")
                if [ "$is_conn" == "1" ]; then
                    script_command=$(python3 -c "from geo_funcs import tell_location; print(tell_location('$logged_in_usr'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                else
                    output sad
                    echo No internet connection :/
                fi
            elif [ "$input1" == "whereip" ]; then
                ip_add="$input2"
                if [ -n "$ip_add" ]; then
                    is_conn=$(python3 -c "from network_funcs import check_connection; print(check_connection())")
                    if [ "$is_conn" == "1" ]; then
                        script_command=$(python3 -c "from geo_funcs import whereip; print(whereip('$ip_add'))")
                        output normal
                        echo "$script_command"
                        script_command=""
                    else
                        output sad
                        echo No internet connection :/
                    fi
                else
                    output angry
                    echo Enter valid IPv4 address
                fi
            elif [ "$input1" == "whereloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    output normal
                    script_command=$(python3 -c "from geo_funcs import whereloc; print(whereloc('$logged_in_usr', '$loc_name'))")
                    echo "$script_command"
                fi
            elif [ "$input1" == "addloc" ]; then
                if [ "$input2" == "here" ]; then
                    read -p "Locations name: " name
                    lat=$(python3 -c "from geo_funcs import tell_latitude; print(tell_latitude())")
                    lng=$(python3 -c "from geo_funcs import tell_longitude; print(tell_longitude())")
                    script_command=$(python3 -c "from geo_funcs import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                elif [[ $input2 == *"/"* ]]; then
                    read -p "Locations name: " name
                    lat=$(echo "$input2" | cut -d '/' -f1)
                    lng=$(echo "$input2" | cut -d '/' -f2)
                    number_regex='^[+-]?[0-9]+\.?[0-9]*$'
                    if [[ $lat =~ $number_regex && $lng =~ $number_regex ]]; then
                        script_command=$(python3 -c "from geo_funcs import add_location; print(add_location('$logged_in_usr', '$name', '$lat', '$lng'))")
                        output normal
                        echo "$script_command"
                        script_command=""
                    else
                        output angry
                        echo Enter only numbers or floating points e.x. "[12.34/5.67]"
                    fi
                fi
            elif [ "$input1" == "remloc" ]; then
                loc_name="$input2"
                if [ -n "$loc_name" ]; then
                    script_command=$(python3 -c "from geo_funcs import remove_location; print(remove_location('$logged_in_usr', '$loc_name'))")
                    output surprise
                    echo "$script_command"
                    script_command=""
                else
                    output sad
                    echo Enter location name plweas
                fi
            elif [ "$input1" == "showloc" ]; then
                script_command=$(python3 -c "from geo_funcs import show_location; print(show_location('$logged_in_usr'))")
                output surprise
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distance" ]; then
                read -p "Enter latitude and longitude of first location: " lat1 lng1
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from geo_funcs import distance; print(distance('$lat1', '$lng1', '$lat2', '$lng2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distname" ]; then
                read -p "Enter name of first location: " name
                read -p "Enter latitude and longitude of second location: " lat2 lng2
                script_command=$(python3 -c "from geo_funcs import distname; print(distname('$logged_in_usr', '$name', '$lat2', '$lng2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "distnames" ]; then
                read -p "Enter name of first location: " name1
                read -p "Enter name of first location: " name2
                script_command=$(python3 -c "from geo_funcs import distnames; print(distnames('$logged_in_usr', '$name1', '$name2'))")
                output normal
                echo "$script_command"
                script_command=""
            elif [ "$input1" == "disthere" ]; then
                loc="$input2"
                if [ -n "$loc" ]; then
                    script_command=$(python3 -c "from geo_funcs import disthere; print(disthere('$logged_in_usr', '$loc'))")
                    output normal
                    echo "$script_command"
                    script_command=""
                fi
            else
                if [ "$input1" == "quit" ]; then
                    output sad
                    tell_farewell
                else
                    output random
                    echo ">" $input1 $input2
                fi

            fi
            
        done

    fi

fi